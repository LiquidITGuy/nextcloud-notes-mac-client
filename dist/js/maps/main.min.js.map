{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["'use strict'\n\nconst {app, BrowserWindow, ipcMain, protocol, webContents} = require('electron')\nconst url\t\t= require( 'url' )\nconst path\t\t= require( 'path' )\nconst dialog\t= require( 'electron' ).dialog\nconst Store\t\t= require( 'electron-store' )\nconst fs\t\t= require( 'fs-extra' )\nconst log\t\t= require( 'electron-log' )\n\nconst marked \t\t\t= require( 'marked' )\nconst removeMarkdown\t= require( 'remove-markdown' )\n\nconst preferences = require( './window-prefs.min' )\nconst ncLoginflow = require( './window-nc-loginflow.min' )\n\n\nlet win,\n\twillQuit = false\n\nlet store = new Store({\n\tname: 'config',\n\tdefaults: {\n\t\t\n\t\twindowBounds: {\n\t\t\t\n\t\t\twidth: 1000,\n\t\t\theight: 680,\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\t\n\t\tloginCredentials: {\n\t\t\t\n\t\t\tserver: '',\n\t\t\tusername: '',\n\t\t\tpassword: ''\n\t\t},\n\t\t\n\t\tappInterface: {\n\t\t\t\n\t\t\tsidebar: null,\n\t\t\tselected: null,\n\t\t\tcategories: true\n\t\t},\n\t\t\n\t\tappSettings: {\n\t\t\t\n\t\t\tsortby: 'modified',\n\t\t\torderby: 'desc',\n\t\t\tzoom: '10',\n\t\t\tcursor: 'start',\n\t\t\tspellcheck: true,\n\t\t\tshowcats: true,\n\t\t\tordercats: 'asc',\n\t\t\tcatcount: false,\n\t\t\tnocertificate: false,\n\t\t\tstopwords: false,\n\t\t\tstemming: false,\n\t\t\tediting: false\n\t\t},\n\t\t\n\t\tcategories: {\n\t\t\t\n\t\t\tselected: '##all##',\n\t\t\tlist: null\n\t\t},\n\t\t\n\t\texportPath: app.getPath('desktop')\n\t}\n})\n\n\n\nfunction createWindow() {\n\t\n\tlet { x, y, width, height } = store.get('windowBounds')\n\t\n\twin = new BrowserWindow({\n\t\tshow: false,\n\t\tx: x,\n\t\ty: y,\n\t\twidth: width,\n\t\theight: height,\n\t\tminWidth: 800,\n\t\tminHeight: 372,\n\t\ttitle: '',\n\t\tvibrancy: 'sidebar',\n\t\twebPreferences: {\n\t\t\tdevTools: false,\n\t\t\tnodeIntegration: true,\n\t\t\tenableRemoteModule: true,\n\t\t\tpreload: path.join(__dirname, './preload.min.js'),\n\t\t\tspellcheck: true\n\t\t}\n\t})\n\t\n\tfunction saveWindowBounds() {\n\t\t\n\t\tstore.set('windowBounds', win.getBounds())\n\t}\n\t\n\twin.loadURL(url.format ({ \n\t\t\n\t\tpathname: path.join(__dirname, '../html/app.html'), \n\t\tprotocol: 'file:', \n\t\tslashes: true\n\t}))\n\t\n\twin.once('ready-to-show', () => {\n\t\t\n\t\twin.show()\n\t})\n\t\n\twin.on('resize', saveWindowBounds)\n\twin.on('move', saveWindowBounds)\n\n\twin.on('blur', () => {\n\t\t\n\t\twin.setVibrancy( 'window' )\n\t})\n\t\n\twin.on('focus', () => {\n\t\t\n\t\twin.setVibrancy( 'sidebar' )\n\t})\n\t\n\twin.on('close', (e) => {\n\t\t\n\t\tif(willQuit === false) {\n\t\t\te.preventDefault()\n\t\t\twin.webContents.send('before-quit', '')\n\t\t\t\n\t\t\twillQuit = true\n\t\t}\n\t})\n\t\n\twin.webContents.on('did-fail-load', () => {\n    \t\n\t\tlog.error( `main window did not load` )\n\t})\n\t\n\twin.webContents.on( 'crashed', ( event, killed ) => {\n\t\t\n\t\tlog.info( `main window has crashed:` )\n\t\tlog.error( event )\n\t})\n\t\n\twin.on( 'unresponsive', () => {\n\t\t\n\t\tlog.info( `main window is not respondingâ€¦` )\n\t})\n\t\n\twin.on( 'responsive', () => {\n\t\t\n\t\tlog.info( `main window is responding` )\n\t})\n\t\n\tprotocol.registerFileProtocol('nc', (request) => {\n\t\t\n\t\tif( request.url ) {\n\t\t\n\t\t\tconst url = request.url.split( '&' )\n\t\t\t\n\t\t\tconst \tuser = url[1].replace('user:', ''),\n\t\t\t\t\tpass = url[2].replace('password:', '')\n\t\t\t\n\t\t\tstore.set( 'loginCredentials.username', decodeURIComponent(user) )\n\t\t\tstore.set( 'loginCredentials.password', pass )\n\t\t\t\n\t\t\t//loginFlow.close()\n\t\t\tncLoginflow.closeLoginflow()\n\t\t\t\n\t\t\twin.webContents.send('close-login-modal', 'close-login-modal')\n\t\t\twin.webContents.send('reload-sidebar', 'login')\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tlog.error('Failed to register nc protocol')\n\t\t}\n\t})\n\t\n\trequire( './menu-app.min' )\n\trequire( './menu-sidebar.min' )\n\trequire( './menu-notes.min' )\n}\n\napp.on('ready', createWindow)\n\n\n\napp.on('certificate-error', (event, webContents, url, error, certificate, callback) => {\n\t\n\tif( store.get('appSettings.nocertificate') ) {\n\t\t\n\t\tlog.info(`certificate ignored`)\n\t\tevent.preventDefault()\n\t\tcallback(true)\n\t\t\n\t} else {\n\t\t\n\t\tconst i18n = require( './i18n.min' )\n\t\t\n\t\tlog.error(error)\n\t\tcallback(false)\n\t\tlet server = store.get( 'loginCredentials.server' )\n\t\t\n\t\tdialog.showErrorBox(\n\t\t\ti18n.t('main:dialog.error.cert.title', 'Your connection is not private'),\n\t\t\t`${error}\\n\\n` +\n\t\t\ti18n.t('main:dialog.error.cert.text', {server: server})\n\t\t)\n\t}\n})\n\n\n\nprocess.on('uncaughtException', (err, origin) => {\n\t\n\tlog.error(`caught exception: ${err}`)\n\tlog.info(`exception origin: ${origin}`)\n})\n\n\n\nipcMain.on('loginflow', (event, message) => {\n\t\n\tncLoginflow.openLoginflow( message )\n})\n\n\n\napp.on('open-prefs', () => {\n\t\n\tpreferences.openPrefs()\n})\n\n\n\nipcMain.on('print-preview', (event, message) => {\n\t\n\tconst print\t= require( './print.min' )\n\tprint.printNote( message )\n})\n\n\n\nipcMain.on('quit-app', (event, message) => {\n\t\n\tif( willQuit ) app.quit()\n})\n\n\nipcMain.on('update-titlebar', (event, message) => {\n\t\n\twin.setTitle( message )\n})\n\n\nipcMain.on('new-category', (event, message) => {\n\t\n\twin.webContents.send('context-category', message)\n})\n\n\nipcMain.on('hyperlink', (event, message) => {\n\t\n\twin.webContents.send('add-hyperlink', message)\n})\n\n\nipcMain.on('table', (event, message) => {\n\t\n\twin.webContents.send('add-table', message)\n})\n\n\nipcMain.on('reload-sidebar', (event, message) => {\n\t\n\twin.webContents.send('reload-sidebar', message)\n})\n\n\nipcMain.on('set-zoom-slider', (event, message) => {\n\t\n\twin.webContents.send('set-zoom-slider', message)\n})\n\n\nipcMain.on('update-theme', (event, message) => {\n\t\n\twebContents.getAllWebContents().forEach( wc => {\n\t\t\n\t\twc.send('set-theme', message)\n\t})\n})\n\n\nipcMain.on('error-in-render', function(event, message) {\n    \n\tlog.error(`exception in render process:`)\n\tlog.info (message)\n})\n"],"file":"../main.min.js"}