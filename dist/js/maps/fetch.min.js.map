{"version":3,"sources":["fetch.js"],"names":["i18n","require","remote","dialog","Store","store","log","server","get","username","password","exports","apiCall","call","id","body","callback","method","url","init","headers","Authorization","btoa","Content-Type","mode","cache","credentials","JSON","stringify","info","fetch","then","response","ok","text","warn","console","table","Error","status","message","notes","parse","showErrorBox","t","error","catch"],"mappings":"AAAA,aAEA,MAAMA,KAAOC,QAAS,eAEhBC,OAAGA,QAAWD,QAAS,YACvBE,OAAUD,OAAOC,OACjBC,MAAWH,QAAS,kBACpBI,MAAW,IAAID,MACfE,IAAQL,QAAS,gBAEvB,IAAKM,OAAWF,MAAMG,IAAK,2BACzBC,SAAYJ,MAAMG,IAAK,6BACvBE,SAAYL,MAAMG,IAAK,6BAGzBG,QAAQC,QAAU,SAAWC,EAAMC,EAAIC,EAAMC,GAE5C,IAAIC,EAEJ,OAAQJ,GAEP,IAAK,MACJI,EAAS,OACV,MAEA,IAAK,OACL,IAAK,SACL,IAAK,WACJA,EAAS,MACV,MAEA,IAAK,SACJA,EAAS,SACV,MAEA,QACCA,EAAS,MAGX,IAAIC,EAAM,uCACVC,EAAO,CAENF,OAAQA,EACRG,QAAS,CACRC,cAAiB,SAAWC,KAAMb,SAAW,IAAMC,UACnDa,eAAgB,oBAEjBC,KAAM,OACNC,MAAO,WACPC,YAAa,QAGVZ,IAAOI,GAAO,IAAIJ,KAClBC,IAASI,EAAKJ,KAAOY,KAAKC,UAAWb,IAEzCT,IAAIuB,KAAM,QAAQtB,SAASW,KAE3BY,MAAMvB,OAASW,EAAKC,GACnBY,MAAK,SAASC,GAEd,GAAIA,EAASC,GASZ,OADA3B,IAAIuB,KAAM,eACHG,EAASE,OALhB,MAFA5B,IAAI6B,KAAK,eACTC,QAAQC,MAAML,GACRM,MAAMN,EAASO,WAQpBR,MAAK,SAASS,GAEhB,IAAIC,EAAQd,KAAKe,MAAMF,GAEA,SAAnBC,EAAc,QAEjBtC,OAAOwC,aACN3C,KAAK4C,EAAE,8BAA+B,sBACtC5C,KAAK4C,EAAE,6BAA8B,uCAGtCtC,IAAIuC,MAAOJ,EAAe,UAI1BzB,EAAUH,EAAMC,EAAIC,EAAM0B,MAGzBK,OAAO,SAAUD,GAEnB1C,OAAOwC,aACN3C,KAAK4C,EAAE,gCAAiC,gBACxC5C,KAAK4C,EAAE,+BAAgC,iCAAmC,MAAM1B,QAAU2B,KAG3FvC,IAAIuC,MAAOA","file":"../fetch.min.js","sourcesContent":["'use strict'\n\nconst i18n = require( './i18n.min' )\n\nconst {  remote }\t= require( 'electron' )\nconst dialog\t\t= remote.dialog\nconst Store\t\t\t\t= require( 'electron-store' )\nconst store\t\t\t\t= new Store()\nconst log\t\t\t= require( 'electron-log' )\n\nlet \tserver \t\t= store.get( 'loginCredentials.server' ),\n\t\tusername \t= store.get( 'loginCredentials.username' ),\n\t\tpassword \t= store.get( 'loginCredentials.password' )\n\n\nexports.apiCall = function ( call, id, body, callback ) {\n\t\n\tlet method\n\t\n\tswitch( call ) {\n\t\t\n\t\tcase 'new':\n\t\t\tmethod = 'POST'\n\t\tbreak\n\t\t\n\t\tcase 'save':\n\t\tcase 'update':\n\t\tcase 'category':\n\t\t\tmethod = 'PUT'\n\t\tbreak\n\t\t\n\t\tcase 'delete':\n\t\t\tmethod = 'DELETE'\n\t\tbreak\n\t\t\n\t\tdefault: //all, single or export\n\t\t\tmethod = 'GET'\n\t}\n\t\n\tlet url = '/index.php/apps/notes/api/v0.2/notes',\n\tinit = {\n\t\t\n\t\tmethod: method,\n\t\theaders: {\n\t\t\t'Authorization': 'Basic ' + btoa( username + ':' + password ),\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tmode: 'cors',\n\t\tcache: 'no-cache',\n\t\tcredentials: 'omit'\n\t}\n\t\n\tif( id ) { url += `/${id}` }\n\tif( body ) { init.body = JSON.stringify( body ) }\n\t\n\tlog.info( `URL: ${server}${url}` )\n\t\n\tfetch(server + url, init)\n\t.then(function(response) {\n\t\t\n\t\tif(!response.ok) {\n\t\t\t\n\t\t\tlog.warn(`fetch error`)\n\t\t\tconsole.table(response)\n\t\t\tthrow Error(response.status)\n\t\t\t\n\t\t} else {\n\t\t\n\t\t\tlog.info( `response ok` )\n\t\t\treturn response.text()\n\t\t}\n\t\n\t}).then(function(message) {\n\t\t\n\t\tlet notes = JSON.parse(message)\n\t\t\n\t\tif (notes['status'] == 'error') {\n\t\t\t\n\t\t\tdialog.showErrorBox(\n\t\t\t\ti18n.t('app:dialog.error.json.title', 'JSON parsing error'),\n\t\t\t\ti18n.t('app:dialog.error.json.text', 'An error occured parsing the notes')\n\t\t\t)\n\t\t\t\n\t\t\tlog.error( notes['message'] )\n\t\t\n\t\t} else {\n\t\t\t\n\t\t\tcallback( call, id, body, notes )\n\t\t}\n\t\n\t}).catch( function( error ) {\n\t\t\n\t\tdialog.showErrorBox(\n\t\t\ti18n.t('app:dialog.error.server.title', 'Server error'),\n\t\t\ti18n.t('app:dialog.error.server.text', 'there was an error retrieving') + `:\\n${url}\\n\\n${error}`\n\t\t)\n\t\t\n\t\tlog.error( error )\n\t})\n}\n"]}